version: '3.8'

services:
  # Application service
  app:
    build:
      context: .
      target: production
    container_name: sirtifai-backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOST=0.0.0.0
      - DATABASE_TYPE=mongodb
      - MONGODB_URI=mongodb://mongodb:27017/sirtifai_db
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - JWT_REFRESH_SECRET=your-super-secret-refresh-key-change-this-in-production
      - EMAIL_HOST=smtp.gmail.com
      - EMAIL_PORT=587
      - PAYMENTS_EMAIL_USER=your-email@gmail.com
      - PAYMENTS_EMAIL_PASSWORD=your-app-password
      - EMAIL_FROM=noreply@sirtifai.com
    depends_on:
      mongodb:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - sirtifai-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB service
  mongodb:
    image: mongo:7.0
    container_name: sirtifai-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=sirtifai_db
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - sirtifai-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL service (alternative to MongoDB)
  postgres:
    image: postgres:15-alpine
    container_name: sirtifai-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=sirtifai_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - sirtifai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    profiles:
      - postgres

  # Redis service (for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: sirtifai-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redispassword
    volumes:
      - redis_data:/data
    networks:
      - sirtifai-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    profiles:
      - redis

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: sirtifai-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - sirtifai-network
    profiles:
      - nginx

  # Development service
  app-dev:
    build:
      context: .
      target: development
    container_name: sirtifai-backend-dev
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - HOST=0.0.0.0
      - DATABASE_TYPE=mongodb
      - MONGODB_URI=mongodb://mongodb:27017/sirtifai_dev_db
      - JWT_SECRET=dev-jwt-secret
      - JWT_REFRESH_SECRET=dev-refresh-secret
    depends_on:
      mongodb:
        condition: service_healthy
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
    networks:
      - sirtifai-network
    profiles:
      - dev

volumes:
  mongodb_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  sirtifai-network:
    driver: bridge
